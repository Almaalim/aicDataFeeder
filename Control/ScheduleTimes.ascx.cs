using System;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;

public partial class Control_ScheduleTimes : System.Web.UI.UserControl
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //PageFun pgCs   = new PageFun();
    General GenCs  = new General();
    DBFun   DBCs   = new DBFun();
    //CtrlFun CtrlCs = new CtrlFun();
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private string _ValidationGroupName;
    public string ValidationGroupName { get { return _ValidationGroupName; } set { if (_ValidationGroupName != value) { _ValidationGroupName = value; } } }

   
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            /*** Fill Session ************************************/
            //pgCs.FillSession();
            //FormSession.FillSession()
            /*** Fill Session ************************************/

            if (!IsPostBack)
            {
                /*** Common Code ************************************/
                /*** Common Code ************************************/

                cvTimes.ValidationGroup = ValidationGroupName;
            }
        }
        catch (Exception ex) { }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    protected void btnAdd_Click(object sender, ImageClickEventArgs e)
    {
        if (string.IsNullOrEmpty(tpTimes.getTime())) { return; }

        string tm = tpTimes.getTime();
        ListItem _li = new ListItem(tm);
        if (!lstTimes.Items.Contains(_li)) { lstTimes.Items.Insert(FindIndex(tm), tm); }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private int FindIndex(string Time)
    {
        if (lstTimes.Items.Count == 0) { return 0; }
        for (int i = 0; i < lstTimes.Items.Count; i++) 
        { 
            if (timeToInt(Time) < timeToInt(lstTimes.Items[i].ToString()) ) { return i; } 
        }

        return lstTimes.Items.Count;         
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private int timeToInt(string Time)
    {
        string HH = Time.Substring(0, 2);
        string MM = Time.Substring(3, 2);

        return ((Convert.ToInt16(HH)) * 100) + Convert.ToInt16(MM);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    protected void btnRemove_Click(object sender, ImageClickEventArgs e)
    {
         if (lstTimes.SelectedIndex > -1) { lstTimes.Items.RemoveAt(lstTimes.SelectedIndex); }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void Clear()
    {
        tpTimes.ClearTime();
        lstTimes.Items.Clear();
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void Enabled(bool status)
    {
        tpTimes.Enabled   = status;
        btnAdd.Enabled    = status;
        btnRemove.Enabled = status;
        lstTimes.Enabled  = status;
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void FillTimes(string Time) 
    {
        if (string.IsNullOrEmpty(Time)) { return; }
        if (lstTimes.Items.Count > 0) { lstTimes.Items.Clear(); }

        string[] Times = Time.Split(',');
        foreach (string tm in Times) { lstTimes.Items.Add(new ListItem(tm)); }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public string getTimes() 
    {
        if (lstTimes.Items.Count <= 0) { return null; }
        int lCount = lstTimes.Items.Count;

        string Times = "";
        for (int i = 0; i < lstTimes.Items.Count; i++) { if (string.IsNullOrEmpty(Times)) { Times = (lstTimes.Items[i]).Text; } else { Times += "," + (lstTimes.Items[i]).Text; } }

        return Times;
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void isValid(bool pStatus)
    {
        cvTimes.Enabled = pStatus;
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /*******************************************************************************************************************************/
    /*******************************************************************************************************************************/
    #region Custom Validate Events

    protected void Times_ServerValidate(Object source, ServerValidateEventArgs e)
    {
        try
        {
            if (source.Equals(cvTimes)) { if (lstTimes.Items.Count == 0 ) { e.IsValid = false; } }
        }
        catch { e.IsValid = false; }
    }

    #endregion
    /*******************************************************************************************************************************/
    /*******************************************************************************************************************************/

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}